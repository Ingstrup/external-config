
version "$pluginVersion"
group "dk.glasius"

apply plugin: "idea"
apply plugin: "org.grails.grails-plugin"
apply plugin: 'maven-publish'
apply plugin: 'signing'

sourceCompatibility = "1.8"
targetCompatibility = "1.8"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
}

dependencies {

    implementation "org.springframework.boot:spring-boot-starter-logging"
    implementation "org.springframework.boot:spring-boot-autoconfigure"
    implementation "org.grails:grails-core"
    implementation "org.grails:grails-dependencies"

    console "org.grails:grails-console"
    profile "org.grails.profiles:plugin"
    implementation "org.springframework.boot:spring-boot-starter-tomcat"
    testCompile "org.grails:grails-web-testing-support"

    runtime 'com.virtualdogbert:GroovyConfigWriter:1.1'
    runtime 'org.yaml:snakeyaml:1.23'
}

bootJar.enabled = false

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
}

publishing {
    publications {
        maven(MavenPublication) {
            groupId = project.group
            artifactId = 'external-config'
            version = project.version

            from components.java
            artifact sourcesJar
            artifact javadocJar
            pom {
                name = 'External Config'
                description = 'Mimic the Grails 2 way of handling external configurations'
                url = 'https://github.com/sbglasius/external-config'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'sbglasius'
                        name = 'SÃ¸ren Berg Glasius'
                        email = 'soeren@glasius.dk'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/sbglasius/external-config.git'
                    developerConnection = 'scm:git:ssh:github.com:sbglasius/external-config.git'
                    url = 'https://github.com/sbglasius/external-config/'
                }
            }
        }
    }
}

ext.signingKey = System.getenv('SIGNING_KEY')
ext.signingPassword = System.getenv('SIGNING_PASSWORD')
if(!project.findProperty('signingKey')) {
    ext."signing.keyId" = project.hasProperty('signing.keyId') ? project.getProperty('signing.keyId') : System.getenv('SIGNING_KEY_ID')
    ext."signing.password" = project.hasProperty('signing.password') ? project.getProperty('signing.password') : System.getenv('SIGNING_PASSPHRASE')
    ext."signing.secretKeyRingFile" = project.hasProperty('signing.secretKeyRingFile') ? project.getProperty('signing.secretKeyRingFile') : (System.getenv('SIGNING_PASSPHRASE') ?: "${System.properties['user.home']}/.gnupg/secring.gpg")
}

ext.isReleaseVersion = !version.endsWith('SNAPSHOT')

afterEvaluate {
    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask(publishToSonatype) }
        if(project.findProperty('signingKey')) {
            //If required, read a sub-key specified by its ID in property signingKeyId
            //def signingKeyId = findProperty("signingKeyId")
            //read property 'signingKey'
            def signingKey = findProperty("signingKey")
            //read property 'signingPassword'
            def signingPassword = findProperty("signingPassword")
            //Select to use in-memory ascii-armored keys
            useInMemoryPgpKeys(signingKey, signingPassword)
            //Only if also using signingKeyId
            //useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
        }

        sign publishing.publications.maven
    }
}

tasks.withType(Sign) {
    onlyIf { isReleaseVersion }
}

