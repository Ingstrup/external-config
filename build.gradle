buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
        mavenCentral()
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsGradlePluginVersion"
        classpath "io.github.gradle-nexus:publish-plugin:1.1.0"
    }
}

allprojects {
    apply plugin: 'groovy'    

    version "$version"
    
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }

    tasks.withType(Test) {
        useJUnitPlatform()
    }

    tasks.withType(GroovyCompile) {
        configure(groovyOptions) {
            forkOptions.jvmArgs = ['-Xmx1024m']
        }
    }
    
}

if (project.hasProperty('release')) {
    apply plugin: 'io.github.gradle-nexus.publish-plugin'

    nexusPublishing {
        repositories {
            sonatype {
                def ossUser = System.getenv("SONATYPE_USERNAME") ?: project.hasProperty("sonatypeOssUsername") ? project.sonatypeOssUsername : ''
                def ossPass = System.getenv("SONATYPE_PASSWORD") ?: project.hasProperty("sonatypeOssPassword") ? project.sonatypeOssPassword : ''
                def ossStagingProfileId = System.getenv("SONATYPE_STAGING_PROFILE_ID") ?: project.hasProperty("sonatypeOssStagingProfileIdExternalConfig") ? project.sonatypeOssStagingProfileIdExternalConfig : ''

                nexusUrl = uri("https://oss.sonatype.org/service/local/")
                snapshotRepositoryUrl = uri("https://oss.sonatype.org/content/repositories/snapshots/")
                username = ossUser
                password = ossPass
                stagingProfileId = ossStagingProfileId
            }
        }
    }
}

task snapshotVersion {
    doLast {
        if (!project.version.endsWith('-SNAPSHOT')) {
            ant.propertyfile(file: "gradle.properties") {
                entry(key: "version", value: "${project.version}-SNAPSHOT")
            }
        }
    }
}